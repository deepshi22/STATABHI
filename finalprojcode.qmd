---
title: "Final Project Code"
format: html
editor: visual
---

## 

{r} library(dplyr) library(ggplot2) library(plotly)

# Load your dataset

data \<- read.csv("C:\\Users\\Dell\\Downloads\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")

Ensure that the Texture variable is correctly formatted as a factor

```{r}
#| code-fold: true
#| code-summary: "Show the code"
data$Texture <- as.factor(data$Texture)
```

Fit a linear regression model to see the effect of Soil Texture on Hay Yield

model_texture_hay \<- lm(Hay.Yield..ton.acre. \~ Texture, data = data)

# Summary of the model to check for significance and coefficients

summary(model_texture_hay)

# Optional: Plot the relationship

p \<- ggplot(data, aes(x = Texture, y = Hay.Yield..ton.acre.)) + geom_boxplot() + labs(title = "Impact of Soil Texture on Hay Yield", x = "Soil Texture", y = "Hay Yield (ton/acre)") + theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Convert ggplot to Plotly

plotly_plot \<- ggplotly(p) print(plotly_plot)

## Research Question 2 : Is there a correlation between the drainage of the soil and the presence of flooding?

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary library
library(dplyr)

# Read the dataset
data <- read.csv("C:\\Users\\Dell\\Downloads\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")

# Convert factors to numeric if necessary (assuming 'Flooding' is binary or categorical)
data$Drainage <- as.numeric(as.factor(data$Drainage))
data$Flooding <- as.numeric(as.factor(data$Flooding))

# Handling NA values
data <- na.omit(data)

# Using cor.test to determine the correlation
cor_test <- cor.test(data$Drainage, data$Flooding)
print(cor_test)


```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary libraries
library(randomForest)
library(dplyr)
colnames(data)
# Handling NA values - assuming you're interested in predicting 'Flooding'
data_clean <- na.omit(data[, c("Flooding", "Drainage", "Texture", "Soil.Slope", "Capability.Class..FM5.CAP.")])
data_clean$Texture <- as.numeric(as.factor(data_clean$Texture))



# Convert all categorical variables to factor type
data_clean$Capability_Class <- as.factor(data_clean$"Capability.Class..FM5.CAP.")


# Fit Random Forest model
set.seed(123)  # for reproducibility
rf_model <- randomForest(Flooding ~ ., data=data_clean, ntree=500, importance=TRUE)

# Print model summary
print(rf_model)

# Plot importance of variables
varImpPlot(rf_model)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary library
library(stats)

data$Texture <- as.numeric(as.factor(data$Texture))  # Convert categorical to numeric
data$Drainage <- as.numeric(as.factor(data$Drainage))  # Convert categorical to numeric if needed

# Fit Multiple Regression Model with Interaction Term
model_interaction <- lm(Flooding ~ Drainage * Texture, data = data)

# Summary of the model to see coefficients and significance
summary(model_interaction)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary libraries
library(randomForest)
library(dplyr)

# Prepare the data
data <- mutate(data, Drainage_Texture_Interaction = Drainage * Texture)

# Fit Random Forest Model including the engineered interaction feature
set.seed(123)  # for reproducibility
rf_model_interaction <- randomForest(Flooding ~ Drainage + Texture + Drainage_Texture_Interaction, data = data, ntree = 500)

# Evaluate the model (assuming Flooding is continuous; adjust as necessary)
print(rf_model_interaction)

# Optionally, view the importance of the new interaction feature
importance(rf_model_interaction)

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary libraries
library(caret)
library(randomForest)

data$Texture <- as.numeric(as.factor(data$Texture))
data$Drainage <- as.numeric(as.factor(data$Drainage))

# Define training control
train_control <- trainControl(method = "cv", number = 10)  # 10-fold cross-validation

# Fit Linear Regression Model using cross-validation
lm_model_cv <- train(Flooding ~ Drainage + Texture + Drainage:Texture, data = data, method = "lm", trControl = train_control)

# Fit Random Forest Model using cross-validation
rf_model_cv <- train(Flooding ~ Drainage + Texture + Drainage:Texture, data = data, method = "rf", trControl = train_control, ntree = 500)

# Summary of cross-validation results
print(lm_model_cv)
print(rf_model_cv)
```

# Diagnostic Plots for Linear Regression

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Fit the linear model
lm_model <- lm(Flooding ~ Drainage + Texture + Drainage:Texture, data = data)

# Diagnostic plots
par(mfrow = c(2, 2))
plot(lm_model)
```

## Research Question 3: How does the presence of multiple mineral soil group (Multiple MSG Flag) affect corn and hay yield across different counties?

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary libraries
library(readr)  # For reading CSV files
library(dplyr)  # For data manipulation
library(ggplot2)  # For creating visualizations

# dataset
data = read_csv("C:\\Users\\Dell\\Downloads\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Check all column names in the dataset
colnames(data)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Ensure 'Multiple MSG Flag' includes 'No' as a factor level correctly
data$`Multiple MSG Flag` <- factor(data$`Multiple MSG Flag`, levels = c("Yes", "No"))

# Now safely replace NA values with "No"
data$`Multiple MSG Flag`[is.na(data$`Multiple MSG Flag`)] <- "No"

# Verify changes to ensure "No" is now included and NAs are handled
table(data$`Multiple MSG Flag`)

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(plotly)

# Create ggplot for Corn Yield
p_corn <- ggplot(data, aes(x = `Multiple MSG Flag`, y = `Corn Yield (ton/acre)`)) +
  geom_boxplot(fill = "blue") +
  labs(title = "Corn Yield by Multiple MSG Flag", x = "Multiple MSG Flag", y = "Corn Yield")

# Convert to plotly
plotly_corn <- ggplotly(p_corn)

# Display the plots
plotly_corn

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Create ggplot for Hay Yield
p_hay <- ggplot(data, aes(x = `Multiple MSG Flag`, y = `Hay Yield (ton/acre)`)) +
  geom_boxplot(fill = "green") +
  labs(title = "Hay Yield by Multiple MSG Flag", x = "Multiple MSG Flag", y = "Hay Yield")

plotly_hay <- ggplotly(p_hay)
plotly_hay
```
